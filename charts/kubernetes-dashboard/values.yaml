app:
  mode: dashboard
  image:
    pullPolicy: IfNotPresent

  settings:
    clusterName: kubernetes
    authMode: token
    enableSkipLogin: false
    enableInsecureLogin: false

  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - kubedash.k8s.local
    path: /
    pathType: Prefix
    useDefaultIngressClass: false
    useDefaultAnnotations: true
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    tls:
      enabled: false

  security:
    csrfKey: ~
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsUser: 1001
      runAsGroup: 2001
      capabilities:
        drop: ["ALL"]

web:
  role: web
  image:
    repository: docker.io/kubernetesui/dashboard-web
    tag: 1.6.2
  service:
    type: ClusterIP
  containers:
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi
    ports:
      - name: web
        containerPort: 8000
        protocol: TCP
    volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
  volumes:
    - name: tmp-volume
      emptyDir: {}

api:
  role: api
  image:
    repository: docker.io/kubernetesui/dashboard-api
    tag: 1.12.0
  service:
    type: ClusterIP
  containers:
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi
    ports:
      - name: api
        containerPort: 8000
        protocol: TCP
    volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
  volumes:
    - name: tmp-volume
      emptyDir: {}

auth:
  role: auth
  image:
    repository: docker.io/kubernetesui/dashboard-auth
    tag: 1.2.4
  service:
    type: ClusterIP
  containers:
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi
    ports:
      - name: auth
        containerPort: 8000
        protocol: TCP
    volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
  volumes:
    - name: tmp-volume
      emptyDir: {}

metricsScraper:
  enabled: true
  image:
    repository: docker.io/kubernetesui/dashboard-metrics-scraper
    tag: 1.2.2
  containers:
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi
    ports:
      - containerPort: 8000
        protocol: TCP
    volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
    livenessProbe:
      httpGet:
        path: /
        port: 8000
        scheme: HTTP
      initialDelaySeconds: 30
      timeoutSeconds: 30
  volumes:
    - name: tmp-volume
      emptyDir: {}

kong:
  enabled: true
  ingressController:
    enabled: false
  manager:
    enabled: false
  proxy:
    type: ClusterIP
    http:
      enabled: false
  dblessConfig:
    configMap: kong-dbless-config

cert-manager:
  enabled: false

nginx:
  enabled: false

extras:
  serviceMonitor:
    enabled: false