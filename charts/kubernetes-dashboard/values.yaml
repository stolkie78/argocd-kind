app:
  mode: dashboard
  image:
    pullPolicy: IfNotPresent

  settings:
    clusterName: kubernetes
    authMode: token
    enableSkipLogin: false
    enableInsecureLogin: false

  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - kubedash.k8s.local
    path: /
    pathType: Prefix
    useDefaultIngressClass: false
    useDefaultAnnotations: true
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    tls:
      enabled: false

web:
  role: web
  service:
    type: ClusterIP
  containers:
    ports:
      - name: web
        containerPort: 8000
        protocol: TCP
    volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
  volumes:
    - name: tmp-volume
      emptyDir: {}

api:
  role: api
  service:
    type: ClusterIP
  containers:
    ports:
      - name: api
        containerPort: 8000
        protocol: TCP
    volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
  volumes:
    - name: tmp-volume
      emptyDir: {}

auth:
  role: auth
  service:
    type: ClusterIP
  containers:
    ports:
      - name: auth
        containerPort: 8000
        protocol: TCP
    volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
  volumes:
    - name: tmp-volume
      emptyDir: {}

metricsScraper:
  enabled: true
  service:
    type: ClusterIP
  containers:
    ports:
      - containerPort: 8000
        protocol: TCP
    volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
    livenessProbe:
      httpGet:
        path: /
        port: 8000
        scheme: HTTP
      initialDelaySeconds: 30
      timeoutSeconds: 30
  volumes:
    - name: tmp-volume
      emptyDir: {}